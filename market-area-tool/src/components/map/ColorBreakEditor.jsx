import React, { useState, useEffect, useRef } from 'react';
import { Plus, Minus } from 'lucide-react';
import NumberRangeInput from './NumberRangeInput';

const ColorBreakEditor = ({ breaks = [], onBreaksChange, visualizationType = 'income' }) => {
  const [transparency, setTransparency] = useState(40);
  const [minRange, setMinRange] = useState(0);
  const [maxRange, setMaxRange] = useState(0);
  const [localBreaks, setLocalBreaks] = useState(breaks || []);
  const [hasCustomOpacities, setHasCustomOpacities] = useState(false);
  const [userOverrideCustom, setUserOverrideCustom] = useState(false);
  const [hasCustomLabels, setHasCustomLabels] = useState(false);
  const [originalLabels, setOriginalLabels] = useState({});
  const [customLabelSuffix, setCustomLabelSuffix] = useState('');
  const [decimalPlaces, setDecimalPlaces] = useState(visualizationType === 'income' ? 0 : 2);
  
  // Track the dropdown value separately to ensure proper synchronization
  const [dropdownDecimalPlaces, setDropdownDecimalPlaces] = useState(decimalPlaces);
  
  // Refs for debouncing with extended delays
  const transparencyTimeoutRef = useRef(null);
  const breakTimeoutRefs = useRef({});
  
  // Track user interaction with decimal places to prevent auto-override
  const userHasChangedDecimalPlaces = useRef(false);

  // Extended debounce delays (4.5 seconds for most operations)
  const EXTENDED_DEBOUNCE_DELAY = 4500; // 4.5 seconds
  const QUICK_DEBOUNCE_DELAY = 2000; // 2 seconds for less critical operations
  const VALUE_DEBOUNCE_DELAY = 5000; // 5 seconds for min/max value changes

  // Cleanup timeouts on unmount
  useEffect(() => {
    return () => {
      if (transparencyTimeoutRef.current) {
        clearTimeout(transparencyTimeoutRef.current);
      }
      Object.values(breakTimeoutRefs.current).forEach(timeout => {
        if (timeout) clearTimeout(timeout);
      });
    };
  }, []);

  // Extract common suffix from existing labels
  const extractCommonSuffix = (breaksArray) => {
    if (!breaksArray || breaksArray.length === 0) return '';
    
    const labels = breaksArray.map(b => b.label).filter(Boolean);
    if (labels.length === 0) return '';
    
    // Look for common patterns that indicate suffixes
    const suffixPatterns = [
      // Extract word suffixes like "years", "dollars", etc.
      /(?:less than \d+(?:\.\d+)?\s+|\d+(?:\.\d+)?\s*(?:-|to)\s*\d+(?:\.\d+)?\s+)(.+)$/i,
      // Extract symbol suffixes like "%", "$", etc.
      /(?:less than \d+(?:\.\d+)?|\d+(?:\.\d+)?\s*(?:-|to)\s*\d+(?:\.\d+)?)([%$€£¥])$/i,
    ];
    
    let commonSuffix = '';
    
    for (const pattern of suffixPatterns) {
      const suffixes = labels.map(label => {
        const match = label.match(pattern);
        return match ? match[1].trim() : null;
      }).filter(Boolean);
      
      // If all labels have the same suffix, use it
      if (suffixes.length === labels.length && suffixes.every(s => s === suffixes[0])) {
        commonSuffix = suffixes[0];
        break;
      }
    }
    
    return commonSuffix;
  };

  // Detect if breaks have custom descriptive labels vs auto-generated numerical labels
  const detectCustomLabels = (breaksArray) => {
    if (!breaksArray || breaksArray.length === 0) return false;
    
    // Store original labels for preservation
    const labelMap = {};
    
    const hasCustom = breaksArray.some((breakItem, index) => {
      if (!breakItem.label) return false;
      
      // Store original label
      labelMap[index] = breakItem.label;
      
      // Check if label contains descriptive text beyond just numbers
      const label = breakItem.label.toLowerCase();
      
      // Auto-generated patterns WITHOUT suffixes
      const autoGeneratedPatterns = [
        /^less than \d+(?:\.\d+)?$/,                 // "Less than 30.0" (pure numeric)
        /^\d+(?:\.\d+)?\s*-\s*\d+(?:\.\d+)?$/,       // "30.0-35.0" (pure numeric)
        /^\d+(?:\.\d+)?\s*to\s*\d+(?:\.\d+)?$/,      // "30.0 to 35.0" (pure numeric)
        /^\d+(?:\.\d+)?\s*or more$/,                 // "65.0 or more" (pure numeric)
      ];
      
      // If it matches pure auto-generated patterns, it's not custom
      if (autoGeneratedPatterns.some(pattern => pattern.test(label))) {
        return false;
      }
      
      // Check for descriptive words or suffixes that indicate custom labels
      const descriptiveWords = [
        'years', 'year', 'months', 'month', 'days', 'day',
        'dollars', 'dollar', 'income', 'salary', 'wage',
        'units', 'households', 'residents', 'population',
        'percent', '%', 'rate', 'ratio', 'index', 'points',
        'score', 'value', 'count', 'total', 'average',
        'median', 'maximum', 'minimum', 'range', 'level',
        'grade', 'class', 'category', 'group', 'tier',
        'euros', 'pounds', 'yen', 'currency', 'price',
        'cost', 'revenue', 'profit', 'loss', 'budget',
        'expense', 'fee', 'tax', 'interest', 'dividend'
      ];
      
      return descriptiveWords.some(word => label.includes(word));
    });
    
    setOriginalLabels(labelMap);
    return hasCustom;
  };

  const detectCustomOpacities = (breaksArray) => {
    if (!breaksArray || breaksArray.length === 0) return false;
    
    // If user has explicitly overridden custom settings, don't detect as custom
    if (userOverrideCustom) return false;
    
    // Check if breaks are explicitly marked as having custom opacities (from heat maps)
    const hasExplicitMarkers = breaksArray.some(breakItem => 
      breakItem.preserveOpacity === true || 
      breakItem.hasCustomOpacities === true || 
      (breakItem.originalOpacity !== undefined && breakItem.originalOpacity !== breakItem.symbol?.color?.[3])
    );
  
    if (hasExplicitMarkers) {
      return true;
    }
    
    // Get opacity values and check for intentional variation
    const opacityValues = breaksArray.map(breakItem => {
      if (Array.isArray(breakItem.symbol?.color) && breakItem.symbol.color[3] !== undefined) {
        // Convert opacity to transparency percentage for consistency
        return Math.round((1 - breakItem.symbol.color[3]) * 100);
      }
      return 35; // Default value
    });
    
    // Only consider it custom if there's significant variation AND it looks intentional
    const uniqueOpacities = [...new Set(opacityValues)];
    const hasVariation = uniqueOpacities.length > 1;
    
    if (!hasVariation) return false;
    
    // Check if the variation looks intentional (not just rounding differences)
    const hasSignificantVariation = opacityValues.some(opacity => {
      const firstOpacity = opacityValues[0];
      return Math.abs(opacity - firstOpacity) > 5; // Increased threshold to 5%
    });
    
    // Additional check: if the pattern matches common heat map values, consider it custom
    const commonHeatMapValues = [15, 20, 25, 30, 35, 40, 45, 50];
    const hasHeatMapPattern = uniqueOpacities.every(opacity => 
      commonHeatMapValues.includes(opacity)
    ) && uniqueOpacities.length >= 3;
    
    return hasSignificantVariation || hasHeatMapPattern;
  };

  useEffect(() => {
    if (breaks && breaks.length > 0) {
      const normalizedBreaks = [...breaks];
      
      // Convert Infinity values to large numeric values
      const lastBreakIndex = normalizedBreaks.length - 1;
      if (normalizedBreaks[lastBreakIndex].maxValue === Infinity) {
        const lastMinValue = normalizedBreaks[lastBreakIndex].minValue;
        normalizedBreaks[lastBreakIndex].maxValue = lastMinValue * 2;
      }
      
      // Preserve any custom opacity metadata from heat maps (but allow user override)
      normalizedBreaks.forEach((breakItem, index) => {
        // Only preserve original opacity if user hasn't overridden
        if (!userOverrideCustom && breakItem.originalOpacity !== undefined && Array.isArray(breakItem.symbol.color)) {
          breakItem.symbol.color[3] = breakItem.originalOpacity;
        }
        
        // Preserve custom opacity flags only if user hasn't overridden
        if (!userOverrideCustom) {
          if (breakItem.preserveOpacity) {
            breakItem.preserveOpacity = true;
          }
          if (breakItem.hasCustomOpacities) {
            breakItem.hasCustomOpacities = true;
          }
        }
      });
      
      setLocalBreaks(normalizedBreaks);
      
      // Update min/max range UI values
      const firstBreak = normalizedBreaks[0]?.maxValue;
      const lastBreak = normalizedBreaks[lastBreakIndex]?.minValue;
      const lastBreakMax = normalizedBreaks[lastBreakIndex]?.maxValue;
      
      if (firstBreak !== undefined && lastBreak !== undefined) {
        setMinRange(firstBreak);
        setMaxRange(lastBreakMax || lastBreak * 2);
      }

      // Check for custom opacity values with enhanced detection
      const hasCustom = detectCustomOpacities(normalizedBreaks);
      setHasCustomOpacities(hasCustom);

      // Check for custom labels and preserve them
      const hasCustomLabelsDetected = detectCustomLabels(normalizedBreaks);
      setHasCustomLabels(hasCustomLabelsDetected);

      // Extract and set existing suffix from labels - ALWAYS check for suffixes
      const extractedSuffix = extractCommonSuffix(normalizedBreaks);
      if (extractedSuffix) {
        setCustomLabelSuffix(extractedSuffix);
        console.log("[ColorBreakEditor] Extracted and set suffix from existing labels:", extractedSuffix);
      } else if (!customLabelSuffix) {
        // Only clear if no suffix was previously set by user
        setCustomLabelSuffix('');
      }

      // Sync transparency state - convert opacity to transparency percentage
      const firstBreakColor = normalizedBreaks[0]?.symbol?.color;
      if (Array.isArray(firstBreakColor) && firstBreakColor[3] !== undefined) {
        const currentTransparency = Math.round((1 - firstBreakColor[3]) * 100);
        setTransparency(currentTransparency);
      }

      if (hasCustom) {
        console.log("[ColorBreakEditor] Custom opacities preserved:", 
          normalizedBreaks.map((b, i) => {
            const transparency = Array.isArray(b.symbol?.color) ? Math.round((1 - b.symbol.color[3]) * 100) : 35;
            return `${i}: ${transparency}%`;
          }).join(', ')
        );
      }

      if (hasCustomLabelsDetected) {
        console.log("[ColorBreakEditor] Custom labels detected and preserved:", 
          normalizedBreaks.map((b, i) => `${i}: "${b.label}"`).join(', ')
        );
      }
    }
  }, [breaks, userOverrideCustom]);

  // Update decimal places when visualization type changes (only if user hasn't manually set it)
  const prevVisualizationTypeRef = useRef(visualizationType);
  useEffect(() => {
    // Only auto-set decimal places if visualization type actually changed AND user hasn't manually set it
    if (prevVisualizationTypeRef.current !== visualizationType && !userHasChangedDecimalPlaces.current) {
      const newDecimalPlaces = visualizationType === 'income' ? 0 : 2;
      if (decimalPlaces !== newDecimalPlaces) {
        console.log('[ColorBreakEditor] Auto-setting decimal places for visualization type:', visualizationType, 'to:', newDecimalPlaces);
        setDecimalPlaces(newDecimalPlaces);
        setDropdownDecimalPlaces(newDecimalPlaces); // Sync dropdown state
      }
      prevVisualizationTypeRef.current = visualizationType;
    }
  }, [visualizationType, decimalPlaces]);

  // Sync dropdown state with main decimal places state to handle external changes
  useEffect(() => {
    if (dropdownDecimalPlaces !== decimalPlaces) {
      console.log('[ColorBreakEditor] Syncing dropdown state from', dropdownDecimalPlaces, 'to', decimalPlaces);
      setDropdownDecimalPlaces(decimalPlaces);
    }
  }, [decimalPlaces, dropdownDecimalPlaces]);

  // Guard against undefined or empty breaks
  if (!localBreaks || localBreaks.length === 0) {
    return (
      <div className="p-4 text-gray-600 dark:text-gray-400">
        No break points configured. Please check visualization settings.
      </div>
    );
  }

  const formatValue = (value) => {
    if (value === undefined || value === null) return '';
    if (typeof value === 'number') {
      if (decimalPlaces === 0) {
        return Math.round(value).toLocaleString();
      } else {
        return value.toFixed(decimalPlaces);
      }
    }
    return value;
  };

  const getDisplayLabel = (breakItem, index) => {
    if (!breakItem) return '';
    
    const cleanNumber = (value) => {
      if (value === undefined || value === null) return '';
      if (typeof value === 'number') {
        if (decimalPlaces === 0) {
          return Math.round(value).toLocaleString();
        } else {
          return value.toFixed(decimalPlaces);
        }
      }
      return value;
    };

    const isFirst = index === 0;
    const isLast = index === localBreaks.length - 1;

    let baseLabel = '';
    if (isFirst) {
      baseLabel = `Less than ${cleanNumber(breakItem.maxValue)}`;
    } else if (isLast) {
      baseLabel = `${cleanNumber(breakItem.minValue)} to ${cleanNumber(breakItem.maxValue)}`;
    } else {
      baseLabel = `${cleanNumber(breakItem.minValue)} - ${cleanNumber(breakItem.maxValue)}`;
    }

    // Append custom suffix if provided
    if (customLabelSuffix.trim()) {
      baseLabel += ` ${customLabelSuffix.trim()}`;
    }

    return baseLabel;
  };

  const parseInputValue = (value) => {
    if (value === '' || value === '-' || value === '.' || /^-?\d*\.?\d*$/.test(value)) {
      return value;
    }
  
    const cleanValue = String(value).replace(/,/g, '').trim();
    
    // Don't support Infinity anymore - parse as number instead
    const numValue = parseFloat(cleanValue);
    return isNaN(numValue) ? null : numValue;
  };

  const updateBreak = (index, field, value, immediate = false) => {
    // Create a copy of local breaks for immediate UI updates
    const newLocalBreaks = [...localBreaks];
    const break_item = newLocalBreaks[index];
    
    if (field === 'color') {
      // Preserve existing alpha when changing color
      const existingAlpha = Array.isArray(break_item.symbol.color) ? break_item.symbol.color[3] : 0.65;
      break_item.symbol.color = hexToRgba(value, existingAlpha);
      setLocalBreaks(newLocalBreaks);
      onBreaksChange(newLocalBreaks);
      return;
    } 
    
    // Handle individual break transparency with extended debounce
    if (field === 'individualTransparency') {
      // Clear existing timeout for this specific break
      const timeoutKey = `${index}-transparency`;
      if (breakTimeoutRefs.current[timeoutKey]) {
        clearTimeout(breakTimeoutRefs.current[timeoutKey]);
      }
      
      // Update local state immediately for responsive UI
      const numValue = parseInt(value);
      // Convert transparency percentage to opacity (invert the scale)
      const alpha = (100 - numValue) / 100;
      
      // Update the specific break's transparency immediately in local state
      if (Array.isArray(break_item.symbol.color)) {
        break_item.symbol.color[3] = alpha;
      } else {
        break_item.symbol.color = hexToRgba(break_item.symbol.color, alpha);
      }
      setLocalBreaks(newLocalBreaks);
      
      // Mark that we now have custom opacities (unless user is deliberately making them uniform)
      const allOpacities = newLocalBreaks.map(b => Math.round(((1 - (b.symbol?.color?.[3] || 0.35)) * 100)));
      const allSame = allOpacities.every(o => o === allOpacities[0]);
      setHasCustomOpacities(!allSame);
      
      // Extended debounced update to parent (4.5 seconds)
      breakTimeoutRefs.current[timeoutKey] = setTimeout(() => {
        onBreaksChange([...newLocalBreaks]);
        console.log(`[ColorBreakEditor] Individual transparency updated after ${EXTENDED_DEBOUNCE_DELAY}ms delay`);
      }, immediate ? 0 : EXTENDED_DEBOUNCE_DELAY);
      return;
    }
    
    // Handle global transparency with extended debounce - ALWAYS allow this to work
    if (field === 'transparency') {
      // Update local state immediately for responsive UI
      setTransparency(parseInt(value));
      
      // Clear existing timeout
      if (transparencyTimeoutRef.current) {
        clearTimeout(transparencyTimeoutRef.current);
      }
      
      // Apply global transparency regardless of custom opacity status with extended delay
      // This gives users control to override custom opacities using the global slider
      transparencyTimeoutRef.current = setTimeout(() => {
        const numValue = parseInt(value);
        // Convert transparency percentage to opacity (invert the scale)
        const alpha = (100 - numValue) / 100;
        const updatedBreaks = [...localBreaks];
        
        updatedBreaks.forEach(breakItem => {
          if (Array.isArray(breakItem.symbol.color)) {
            breakItem.symbol.color[3] = alpha;
          } else {
            breakItem.symbol.color = hexToRgba(breakItem.symbol.color, alpha);
          }
          
          // Clear custom opacity flags when user explicitly sets global transparency
          delete breakItem.preserveOpacity;
          delete breakItem.hasCustomOpacities;
          delete breakItem.originalOpacity;
        });
        
        // When user uses global transparency, they're overriding custom settings
        setUserOverrideCustom(true);
        setHasCustomOpacities(false);
        
        // Update the configuration to clear preserve flags
        const configUpdate = {
          ...updatedBreaks,
          preserveOpacity: false,
          hasCustomOpacities: false
        };
        
        onBreaksChange({
            ...originalConfig,
            classBreakInfos: updatedBreaks, // The breaks with the newly formatted labels
            decimalPlaces: validDecimalPlaces, // The user's explicit choice for decimal places
        });
        console.log(`[ColorBreakEditor] Global transparency updated after ${EXTENDED_DEBOUNCE_DELAY}ms delay`);
      }, immediate ? 0 : EXTENDED_DEBOUNCE_DELAY);
      return;
    }
  
    // Handle min/max value updates with extended debouncing (5 seconds for value changes)
    if (field === 'maxValue' || field === 'minValue') {
      const parsedValue = parseInputValue(value);
      
      // Update local state immediately for UI responsiveness
      break_item[field] = value;
      setLocalBreaks(newLocalBreaks);
      
      // Clear existing timeout for this break
      const timeoutKey = `${index}-${field}`;
      if (breakTimeoutRefs.current[timeoutKey]) {
        clearTimeout(breakTimeoutRefs.current[timeoutKey]);
      }
      
      // Function to process the break update with full validation
      const processBreakUpdate = () => {
        const finalBreaks = [...localBreaks];
        const finalBreakItem = finalBreaks[index];
        
        // Parse the final value
        const finalParsedValue = parseInputValue(value);
        if (finalParsedValue === null || typeof finalParsedValue === 'string') {
          // If still not a valid number, try to convert or ignore
          const numericValue = parseFloat(String(value).replace(/,/g, ''));
          if (isNaN(numericValue)) return; // Ignore invalid input
          finalBreakItem[field] = numericValue;
        } else {
          finalBreakItem[field] = finalParsedValue;
        }
        
        // Function to parse break value safely
        const parseBreakValue = (val) => {
          return parseFloat(val);
        };
    
        // Sort breaks based on their values, excluding first and last breaks
        const sortBreaks = () => {
          // Keep first and last breaks in place
          const firstBreak = finalBreaks[0];
          const lastBreak = finalBreaks[finalBreaks.length - 1];
          
          // Sort middle breaks
          const middleBreaks = finalBreaks.slice(1, -1)
            .sort((a, b) => {
              const aVal = parseBreakValue(a.minValue);
              const bVal = parseBreakValue(b.minValue);
              return aVal - bVal;
            });
    
          // Recombine breaks
          return [firstBreak, ...middleBreaks, lastBreak];
        };
    
        // Ensure breaks maintain proper sequence and continuity
        const validateAndAdjustBreaks = (breaks) => {
          // First sort the breaks
          const sortedBreaks = sortBreaks();
          
          // Forward pass to ensure continuity
          for (let i = 0; i < sortedBreaks.length - 1; i++) {
            const current = sortedBreaks[i];
            const next = sortedBreaks[i + 1];
            
            // Ensure current break's min is less than its max
            if (parseBreakValue(current.minValue) >= parseBreakValue(current.maxValue)) {
              current.maxValue = parseBreakValue(current.minValue) + 1;
            }
            
            // Ensure current break's max equals next break's min for all except last break
            if (i < sortedBreaks.length - 2) { // Only adjust when not dealing with last break
              next.minValue = current.maxValue;
            }
          }
          
          // For the last break, check if max is greater than min but don't auto-adjust
          const lastBreak = sortedBreaks[sortedBreaks.length - 1];
          if (parseBreakValue(lastBreak.minValue) >= parseBreakValue(lastBreak.maxValue)) {
            // Only adjust if there's an actual problem
            if (field !== 'maxValue' || index !== sortedBreaks.length - 1) { 
              // Don't auto-adjust if user is explicitly setting the max value of last break
              lastBreak.maxValue = parseBreakValue(lastBreak.minValue) * 1.1;
            }
          }
          
          // Backward pass to maintain continuity for all except last break
          for (let i = sortedBreaks.length - 2; i > 0; i--) {
            const current = sortedBreaks[i];
            const prev = sortedBreaks[i - 1];
            
            prev.maxValue = current.minValue;
          }
    
          return sortedBreaks;
        };
    
        // Apply validation and adjustments
        const adjustedBreaks = validateAndAdjustBreaks(finalBreaks);
    
        // Update all labels
        adjustedBreaks.forEach((breakItem, i) => {
          breakItem.label = getDisplayLabel(breakItem, i);
        });
    
        // Submit the final changes
        onBreaksChange(adjustedBreaks);
        console.log(`[ColorBreakEditor] Min/Max value updated after ${VALUE_DEBOUNCE_DELAY}ms delay`);
      };
      
      // Execute immediately or with extended delay (5 seconds for value changes)
      if (immediate) {
        processBreakUpdate();
      } else {
        // Set extended debounced update
        breakTimeoutRefs.current[timeoutKey] = setTimeout(processBreakUpdate, VALUE_DEBOUNCE_DELAY);
      }
      return;
    }
  };

  // Color conversion utilities
  const rgbaToHex = (rgba) => {
    if (Array.isArray(rgba)) {
      return `#${rgba[0].toString(16).padStart(2, '0')}${rgba[1].toString(16).padStart(2, '0')}${rgba[2].toString(16).padStart(2, '0')}`;
    }
    return rgba;
  };

  const hexToRgba = (hex, alpha = null) => {
    const r = parseInt(hex.slice(1, 3), 16);
    const g = parseInt(hex.slice(3, 5), 16);
    const b = parseInt(hex.slice(5, 7), 16);
    // Use provided alpha or default to 0.65 (35% transparency) only if no alpha specified
    const finalAlpha = alpha !== null ? alpha : 0.65;
    return [r, g, b, finalAlpha];
  };

  // Helper to get the current transparency value for a break (converted from opacity)
  const getBreakTransparency = (breakItem) => {
    if (Array.isArray(breakItem?.symbol?.color) && breakItem.symbol.color[3] !== undefined) {
      // Convert opacity to transparency percentage
      return Math.round((1 - breakItem.symbol.color[3]) * 100);
    }
    return 35; // Default transparency
  };

  const addBreak = () => {
    const lastBreak = localBreaks[localBreaks.length - 1];
    const lastMaxValue = lastBreak.maxValue;
    
    // Calculate new break point values
    const range = lastMaxValue - lastBreak.minValue;
    const newMinValue = lastBreak.minValue;
    const newMaxValue = newMinValue + (range * 0.7); // Smaller increment
    
    // Update last break's max value
    lastBreak.maxValue = newMaxValue;
    
    // Preserve custom label for last break or auto-generate with suffix
    if (hasCustomLabels && originalLabels[localBreaks.length - 1]) {
      lastBreak.label = originalLabels[localBreaks.length - 1];
    } else {
      lastBreak.label = getDisplayLabel(lastBreak, localBreaks.length - 1);
    }
    
    // Create new break with same color configuration as the last break
    // Preserve the exact opacity from the last break
    const lastBreakOpacity = Array.isArray(lastBreak.symbol.color) ? lastBreak.symbol.color[3] : 0.65;
    
    const newBreak = {
      minValue: newMaxValue,
      maxValue: lastMaxValue, // Use the original max value for the new last break
      symbol: {
        type: "simple-fill",
        color: Array.isArray(lastBreak.symbol.color) 
          ? [...lastBreak.symbol.color.slice(0, 3), lastBreakOpacity] 
          : hexToRgba(lastBreak.symbol.color || "#ffffff", lastBreakOpacity),
        outline: { 
          color: [50, 50, 50, 0.2], 
          width: lastBreak.symbol.outline?.width || "0.5px" 
        }
      }
    };
    
    const newBreaks = [...localBreaks, newBreak];
    
    // Update all labels - preserve custom labels where they exist
    newBreaks.forEach((breakItem, idx) => {
      if (hasCustomLabels && originalLabels[idx]) {
        breakItem.label = originalLabels[idx];
      } else {
        breakItem.label = getDisplayLabel(breakItem, idx);
      }
    });

    setLocalBreaks(newBreaks);
    onBreaksChange(newBreaks);
  };

  const removeBreak = (index) => {
    if (localBreaks.length > 2) {
      const newBreaks = [...localBreaks];
      const removedBreak = newBreaks[index];
      const lastMaxValue = newBreaks[newBreaks.length - 1].maxValue;
      
      newBreaks.splice(index, 1);
      
      // Update adjacent breaks
      for (let i = index; i < newBreaks.length - 1; i++) {
        newBreaks[i + 1].minValue = newBreaks[i].maxValue;
      }
      
      // Preserve the last break's max value
      newBreaks[newBreaks.length - 1].maxValue = lastMaxValue;
      
      // Update labels - preserve custom labels where they exist, accounting for removed index
      const updatedOriginalLabels = {};
      Object.keys(originalLabels).forEach(key => {
        const keyIndex = parseInt(key);
        if (keyIndex < index) {
          // Keep labels before removed index unchanged
          updatedOriginalLabels[keyIndex] = originalLabels[key];
        } else if (keyIndex > index) {
          // Shift labels after removed index down by one
          updatedOriginalLabels[keyIndex - 1] = originalLabels[key];
        }
        // Skip the removed index
      });
      setOriginalLabels(updatedOriginalLabels);
      
      // Update all labels - always preserve originals where they exist
      newBreaks.forEach((breakItem, idx) => {
        if (hasCustomLabels && updatedOriginalLabels[idx]) {
          breakItem.label = updatedOriginalLabels[idx];
        } else {
          breakItem.label = getDisplayLabel(breakItem, idx);
        }
      });
      
      // Re-check for custom opacities after removal
      setHasCustomOpacities(detectCustomOpacities(newBreaks));
      
      setLocalBreaks(newBreaks);
      onBreaksChange(newBreaks);
    }
  };

  // Function to apply uniform transparency to all breaks
  const applyUniformTransparency = () => {
    // Convert transparency percentage to opacity (inverted scale)
    const alpha = (100 - transparency) / 100;
    const updatedBreaks = [...localBreaks];
    updatedBreaks.forEach(breakItem => {
      if (Array.isArray(breakItem.symbol.color)) {
        breakItem.symbol.color[3] = alpha;
      } else {
        breakItem.symbol.color = hexToRgba(breakItem.symbol.color, alpha);
      }
      
      // Clear custom opacity flags
      delete breakItem.preserveOpacity;
      delete breakItem.hasCustomOpacities;
      delete breakItem.originalOpacity;
    });
    
    setHasCustomOpacities(false);
    setUserOverrideCustom(true);
    setLocalBreaks(updatedBreaks);
    onBreaksChange({
        ...originalConfig,
        classBreakInfos: updatedBreaks, // The breaks with the newly formatted labels
        decimalPlaces: validDecimalPlaces, // The user's explicit choice for decimal places
    });  };

  // Function to apply custom suffix to all labels (regenerates with suffix)
  const applyCustomSuffixToAllLabels = () => {
    const updatedBreaks = [...localBreaks];
    updatedBreaks.forEach((breakItem, idx) => {
      // For labels that aren't original custom labels, regenerate with suffix
      if (!hasCustomLabels || !originalLabels[idx]) {
        breakItem.label = getDisplayLabel(breakItem, idx);
      }
    });
    
    setLocalBreaks(updatedBreaks);
    onBreaksChange({
        ...originalConfig,
        classBreakInfos: updatedBreaks, // The breaks with the newly formatted labels
        decimalPlaces: validDecimalPlaces, // The user's explicit choice for decimal places
    });  };

  // Function to detect and apply suffix from current labels - ENHANCED
  const syncSuffixFromLabels = () => {
    const detectedSuffix = extractCommonSuffix(localBreaks);
    if (detectedSuffix && detectedSuffix !== customLabelSuffix) {
      setCustomLabelSuffix(detectedSuffix);
      console.log("[ColorBreakEditor] Synced suffix from current labels:", detectedSuffix);
    }
  };

  // Effect to sync suffix when breaks change externally - ENHANCED
  useEffect(() => {
    if (localBreaks && localBreaks.length > 0) {
      // Only sync if we don't already have a suffix set by user input
      const currentSuffix = extractCommonSuffix(localBreaks);
      if (currentSuffix && (!customLabelSuffix || customLabelSuffix !== currentSuffix)) {
        setCustomLabelSuffix(currentSuffix);
        console.log("[ColorBreakEditor] Auto-synced suffix from breaks:", currentSuffix);
      }
    }
  }, [localBreaks, hasCustomLabels]);

  // Function to reset custom opacity detection
  const resetCustomOpacityDetection = () => {
    setUserOverrideCustom(false);
    setHasCustomOpacities(detectCustomOpacities(localBreaks));
  };

  // Handle decimal places change - improved state synchronization with robust dropdown sync
  const handleDecimalPlacesChange = (newDecimalPlaces) => {
    // Ensure we have a valid number
    const validDecimalPlaces = Number.isInteger(newDecimalPlaces) && newDecimalPlaces >= 0 && newDecimalPlaces <= 4 
      ? newDecimalPlaces 
      : 2; // fallback to 2 if invalid
    
    console.log('[ColorBreakEditor] User changed decimal places from', decimalPlaces, 'to:', validDecimalPlaces);
    
    // Mark that user has manually changed decimal places (prevents auto-setting from visualization type)
    userHasChangedDecimalPlaces.current = true;
    
    // Update both states immediately to ensure dropdown reflects the change
    setDecimalPlaces(validDecimalPlaces);
    setDropdownDecimalPlaces(validDecimalPlaces);
    
    // Update labels with new decimal formatting immediately
    if (localBreaks && localBreaks.length > 0) {
      const updatedBreaks = [...localBreaks];
      
      updatedBreaks.forEach((breakItem, idx) => {
        // When user explicitly changes decimal places, ALWAYS regenerate labels
        // This overrides custom label preservation since user wants new formatting
        const cleanNumber = (value) => {
          if (value === undefined || value === null) return '';
          if (typeof value === 'number') {
            if (validDecimalPlaces === 0) {
              return Math.round(value).toLocaleString();
            } else {
              return value.toFixed(validDecimalPlaces);
            }
          }
          return value;
        };

        const isFirst = idx === 0;
        const isLast = idx === localBreaks.length - 1;

        let baseLabel = '';
        if (isFirst) {
          baseLabel = `Less than ${cleanNumber(breakItem.maxValue)}`;
        } else if (isLast) {
          baseLabel = `${cleanNumber(breakItem.minValue)} to ${cleanNumber(breakItem.maxValue)}`;
        } else {
          baseLabel = `${cleanNumber(breakItem.minValue)} - ${cleanNumber(breakItem.maxValue)}`;
        }

        // Append custom suffix if provided
        if (customLabelSuffix.trim()) {
          baseLabel += ` ${customLabelSuffix.trim()}`;
        }

        breakItem.label = baseLabel;
      });
      
      setLocalBreaks(updatedBreaks);
    onBreaksChange({
        ...originalConfig,
        classBreakInfos: updatedBreaks, // The breaks with the newly formatted labels
        decimalPlaces: validDecimalPlaces, // The user's explicit choice for decimal places
    });      
    console.log('[ColorBreakEditor] Labels updated with new decimal places:', validDecimalPlaces);
    }
  };

  return (
    <div className="space-y-4">
      {/* Min/Max Range Section */}
      <div className="grid grid-cols-2 gap-4 border-b border-gray-200 dark:border-gray-700 pb-4">
        <div className="space-y-2">
          <label className="text-sm font-medium text-gray-700 dark:text-gray-300">
            Minimum Range
          </label>
          <NumberRangeInput
            key={`min-range-${decimalPlaces}`}
            value={localBreaks[0]?.maxValue}
            onChange={(value) => updateBreak(0, 'maxValue', value)}
            formatValue={formatValue}
            className="w-full px-3 py-2"
            placeholder="Enter minimum value"
          />
        </div>
        <div className="space-y-2">
          <label className="text-sm font-medium text-gray-700 dark:text-gray-300">
            Maximum Range
          </label>
          <NumberRangeInput
            key={`max-range-${decimalPlaces}`}
            value={localBreaks[localBreaks.length - 1]?.maxValue}
            onChange={(value) => updateBreak(localBreaks.length - 1, 'maxValue', value)}
            formatValue={formatValue}
            className="w-full px-3 py-2"
            placeholder="Enter maximum value"
          />
        </div>
      </div>

      {/* Decimal Places Control Section - Enhanced with robust dropdown synchronization */}
      <div className="space-y-2 border-b border-gray-200 dark:border-gray-700 pb-4">
        <div className="flex items-center justify-between">
          <label className="text-sm font-medium text-gray-700 dark:text-gray-300">
            Decimal Places
          </label>
          <span className="text-xs text-gray-500 dark:text-gray-400">
            For value formatting in legend
          </span>
        </div>
        <select
          key={`decimal-places-${dropdownDecimalPlaces}`} // Force re-render when dropdown state changes
          value={String(dropdownDecimalPlaces)} // Use dropdown state for better synchronization
          onChange={(e) => {
            const newValue = parseInt(e.target.value, 10);
            console.log('[ColorBreakEditor] Dropdown changed to:', newValue, 'current dropdown state:', dropdownDecimalPlaces);
            setDropdownDecimalPlaces(newValue); // Update dropdown state immediately
            handleDecimalPlacesChange(newValue);
          }}
          className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md 
                   bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100
                   focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        >
          <option value="0">0 decimal places (e.g., 1,234)</option>
          <option value="1">1 decimal place (e.g., 1,234.5)</option>
          <option value="2">2 decimal places (e.g., 1,234.56)</option>
          <option value="3">3 decimal places (e.g., 1,234.567)</option>
          <option value="4">4 decimal places (e.g., 1,234.5678)</option>
        </select>
        <div className="flex items-center justify-between text-xs text-gray-500 dark:text-gray-400">
          <span>Preview: {formatValue(12345.6789)}</span>
          <span>
            Current: {decimalPlaces} decimal places 
            {dropdownDecimalPlaces !== decimalPlaces && (
              <span className="text-orange-500"> (Dropdown: {dropdownDecimalPlaces})</span>
            )}
          </span>
        </div>
      </div>

      {/* Custom Label Suffix Section */}
      <div className="space-y-2 border-b border-gray-200 dark:border-gray-700 pb-4">
        <div className="flex items-center justify-between">
          <label className="text-sm font-medium text-gray-700 dark:text-gray-300">
            Custom Label Suffix
          </label>
          <span className="text-xs text-gray-500 dark:text-gray-400">
            Optional (e.g., "years", "dollars")
          </span>
        </div>
        <input
          type="text"
          value={customLabelSuffix}
          onChange={(e) => setCustomLabelSuffix(e.target.value)}
          placeholder="Enter suffix like 'years', 'dollars', '%', etc."
          className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md 
                   bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100
                   focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        />
        {customLabelSuffix && (
          <div className="space-y-2">
            <p className="text-xs text-gray-500 dark:text-gray-400">
              Preview: "Less than {formatValue(30)} {customLabelSuffix.trim()}", "{formatValue(30)} - {formatValue(35)} {customLabelSuffix.trim()}", etc.
            </p>
            <div className="flex space-x-2">
              <button
                onClick={applyCustomSuffixToAllLabels}
                className="px-3 py-1 text-xs bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
              >
                Apply Suffix to All Labels
              </button>
              <button
                onClick={() => {
                  setCustomLabelSuffix('');
                  // Regenerate labels without suffix
                  const updatedBreaks = [...localBreaks];
                  updatedBreaks.forEach((breakItem, idx) => {
                    if (!hasCustomLabels || !originalLabels[idx]) {
                      breakItem.label = getDisplayLabel(breakItem, idx);
                    }
                  });
                  setLocalBreaks(updatedBreaks);
                onBreaksChange({
                    ...originalConfig,
                    classBreakInfos: updatedBreaks, // The breaks with the newly formatted labels
                    decimalPlaces: validDecimalPlaces, // The user's explicit choice for decimal places
                });                
              }}
                className="px-3 py-1 text-xs bg-gray-600 text-white rounded hover:bg-gray-700 transition-colors"
              >
                Remove Suffix
              </button>
            </div>
          </div>
        )}
      </div>

      {/* Color Breaks Section */}
      <div className="space-y-2">
        <div className="flex items-center justify-between">
          <h3 className="text-lg font-semibold text-black dark:text-white">Color Breaks</h3>
          <div className="text-sm text-gray-500 dark:text-gray-400">
            {localBreaks.length} breaks
          </div>
        </div>

        <div className="space-y-3">
          {localBreaks.map((breakItem, index) => (
            <div key={index} className="space-y-2">
              {/* Main break row */}
              <div className="group flex items-center space-x-2 py-1">
                <div className="relative">
                  <div 
                    className="w-8 h-8 rounded overflow-hidden border border-gray-200 dark:border-gray-700"
                    style={{
                      backgroundColor: Array.isArray(breakItem.symbol.color) ? 
                        `rgba(${breakItem.symbol.color[0]}, ${breakItem.symbol.color[1]}, ${breakItem.symbol.color[2]}, ${breakItem.symbol.color[3]})` :
                        breakItem.symbol.color,
                      backgroundImage: 'linear-gradient(45deg, #808080 25%, transparent 25%), linear-gradient(-45deg, #808080 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #808080 75%), linear-gradient(-45deg, transparent 75%, #808080 75%)',
                      backgroundSize: '10px 10px',
                      backgroundPosition: '0 0, 0 5px, 5px -5px, -5px 0px'
                    }}
                  >
                    <input
                      type="color"
                      value={rgbaToHex(breakItem.symbol.color)}
                      onChange={(e) => updateBreak(index, 'color', e.target.value)}
                      className="opacity-0 w-full h-full cursor-pointer"
                      title="Choose color"
                    />
                  </div>
                </div>

                <div className="flex items-center space-x-2 flex-1">
                  <NumberRangeInput
                    key={`min-${index}-${decimalPlaces}`}
                    value={breakItem.minValue}
                    onChange={(value) => updateBreak(index, 'minValue', value)}
                    disabled={index === 0}
                    placeholder="Min"
                    formatValue={formatValue}
                  />
                  <span className="text-gray-400 text-sm">to</span>
                  <NumberRangeInput
                    key={`max-${index}-${decimalPlaces}`}
                    value={breakItem.maxValue}
                    onChange={(value) => updateBreak(index, 'maxValue', value)}
                    disabled={false} // Enable max input for all breaks including last one
                    placeholder="Max"
                    formatValue={formatValue}
                  />
                </div>

                {index !== 0 && index !== localBreaks.length - 1 && (
                  <button
                    onClick={() => removeBreak(index)}
                    className="text-gray-500 hover:text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20 p-1 rounded transition-all duration-200 opacity-60 hover:opacity-100"
                    title="Remove break"
                  >
                    <Minus size={16} />
                  </button>
                )}

                <div className="text-xs text-gray-400 min-w-0 flex-shrink">
                  {getDisplayLabel(breakItem, index)}
                </div>
              </div>

              {/* Individual transparency slider for each color */}
              <div className="pl-10 pr-4">
                <div className="flex items-center space-x-3">
                  <span className="text-xs text-gray-500 dark:text-gray-400 w-20">
                    Transparency:
                  </span>
                  <input
                    type="range"
                    min="0"
                    max="100"
                    step="1"
                    value={getBreakTransparency(breakItem)}
                    onChange={(e) => updateBreak(index, 'individualTransparency', e.target.value)}
                    className="flex-1 h-1.5 bg-gray-200 dark:bg-gray-600 rounded-lg appearance-none cursor-pointer"
                    title={`Individual transparency for break ${index + 1} - higher values = more transparent (saves after 4.5 seconds)`}
                    style={{
                      background: `linear-gradient(to right, 
                        ${Array.isArray(breakItem.symbol.color)
                          ? `rgb(${breakItem.symbol.color[0]}, ${breakItem.symbol.color[1]}, ${breakItem.symbol.color[2]})`
                          : rgbaToHex(breakItem.symbol.color)
                        } 0%, 
                        ${Array.isArray(breakItem.symbol.color) 
                          ? `rgba(${breakItem.symbol.color[0]}, ${breakItem.symbol.color[1]}, ${breakItem.symbol.color[2]}, 0)`
                          : 'transparent'
                        } 100%)`
                    }}
                  />
                  <span className="text-xs text-gray-500 dark:text-gray-400 w-10 text-right">
                    {getBreakTransparency(breakItem)}%
                  </span>
                </div>
              </div>
            </div>
          ))}

          <button
            onClick={addBreak}
            className="w-full mt-2 py-1.5 px-4 border border-dashed border-gray-700 
                     rounded text-gray-400 hover:text-blue-400 hover:border-blue-400 
                     transition-colors flex items-center justify-center space-x-2 text-sm"
          >
            <Plus size={16} />
            <span>Add Break</span>
          </button>
        </div>
      </div>

      {/* Debug info showing current timeout values */}
      <div className="text-xs text-gray-400 border-t border-gray-200 dark:border-gray-700 pt-2">
        💡 Auto-save delays: 5s
      </div>
    </div>
  );
};

export default ColorBreakEditor;
