// src/services/enrichmentService.js

import esriConfig from "@arcgis/core/config";
import * as projection from "@arcgis/core/geometry/projection";
import Polygon from "@arcgis/core/geometry/Polygon";

// Initialize ArcGIS API Key
const ARCGIS_API_KEY = import.meta.env.VITE_ARCGIS_API_KEY;
const CHUNK_SIZE = 3;

esriConfig.apiKey = ARCGIS_API_KEY;

// Organized analysis categories and variables
export const analysisCategories = {
  income: {
    label: "Income by Age",
    variables: [
      { id: "incomebyage.IA15BASECY", label: "Income Age 15-24" },
      { id: "incomebyage.IA25BASECY", label: "Income Age 25-34" },
      { id: "incomebyage.IA35BASECY", label: "Income Age 35-44" },
      { id: "incomebyage.IA45BASECY", label: "Income Age 45-54" },
      { id: "incomebyage.IA55BASECY", label: "Income Age 55-64" },
      { id: "incomebyage.IA65BASECY", label: "Income Age 65-74" },
      { id: "incomebyage.IA75BASECY", label: "Income Age 75+" },
      { id: "incomebyage.IA55UBASCY", label: "Income Age 55+ (UBA)" },
      { id: "incomebyage.IA65UBASCY", label: "Income Age 65+ (UBA)" },
    ],
  },
  incomeAge25: {
    label: "Income by Age (25-34)",
    variables: [
      { id: "incomebyage.A25I0_CY", label: "Income Age 25-34: < $15,000" },
      { id: "incomebyage.A25I15_CY", label: "Income Age 25-34: $15,000-$24,999" },
      { id: "incomebyage.A25I25_CY", label: "Income Age 25-34: $25,000-$34,999" },
      { id: "incomebyage.A25I35_CY", label: "Income Age 25-34: $35,000-$49,999" },
      { id: "incomebyage.A25I50_CY", label: "Income Age 25-34: $50,000-$74,999" },
      { id: "incomebyage.A25I75_CY", label: "Income Age 25-34: $75,000-$99,999" },
      { id: "incomebyage.A25I100_CY", label: "Income Age 25-34: $100,000-$149,999" },
      { id: "incomebyage.A25I150_CY", label: "Income Age 25-34: $150,000-$199,999" },
      { id: "incomebyage.A25I200_CY", label: "Income Age 25-34: $200,000+" },
    ],
  },
  incomeAge35: {
    label: "Income by Age (35-44)",
    variables: [
      { id: "incomebyage.A35I0_CY", label: "Income Age 35-44: < $15,000" },
      { id: "incomebyage.A35I15_CY", label: "Income Age 35-44: $15,000-$24,999" },
      { id: "incomebyage.A35I25_CY", label: "Income Age 35-44: $25,000-$34,999" },
      { id: "incomebyage.A35I35_CY", label: "Income Age 35-44: $35,000-$49,999" },
      { id: "incomebyage.A35I50_CY", label: "Income Age 35-44: $50,000-$74,999" },
      { id: "incomebyage.A35I75_CY", label: "Income Age 35-44: $75,000-$99,999" },
      { id: "incomebyage.A35I100_CY", label: "Income Age 35-44: $100,000-$149,999" },
      { id: "incomebyage.A35I150_CY", label: "Income Age 35-44: $150,000-$199,999" },
      { id: "incomebyage.A35I200_CY", label: "Income Age 35-44: $200,000+" },
    ],
  },
  incomeAge45: {
    label: "Income by Age (45-54)",
    variables: [
      { id: "incomebyage.A45I0_CY", label: "Income Age 45-54: < $15,000" },
      { id: "incomebyage.A45I15_CY", label: "Income Age 45-54: $15,000-$24,999" },
      { id: "incomebyage.A45I25_CY", label: "Income Age 45-54: $25,000-$34,999" },
      { id: "incomebyage.A45I35_CY", label: "Income Age 45-54: $35,000-$49,999" },
      { id: "incomebyage.A45I50_CY", label: "Income Age 45-54: $50,000-$74,999" },
      { id: "incomebyage.A45I75_CY", label: "Income Age 45-54: $75,000-$99,999" },
      { id: "incomebyage.A45I100_CY", label: "Income Age 45-54: $100,000-$149,999" },
      { id: "incomebyage.A45I150_CY", label: "Income Age 45-54: $150,000-$199,999" },
      { id: "incomebyage.A45I200_CY", label: "Income Age 45-54: $200,000+" },
    ],
  },
  currentYearDemographics: {
    label: "Current Year Demographics",
    variables: [
      { id: "AtRisk.TOTPOP_CY", label: "Total Population" },
      { id: "AtRisk.TOTHH_CY", label: "Total Households" },
      { id: "AtRisk.AVGHHSZ_CY", label: "Average Household Size" },
      { id: "AtRisk.AVGHINC_CY", label: "Average Household Income" },
      { id: "KeyUSFacts.OWNER_CY", label: "Owner Occupied Housing Units" },
      { id: "KeyUSFacts.RENTER_CY", label: "Renter Occupied Housing Units" },
    ],
  },
  populationByAge: {
    label: "Population by Age (5-Year Increments)",
    variables: [
      { id: "5yearincrements.POP0_CY", label: "Population Age 0-4" },
      { id: "5yearincrements.POP5_CY", label: "Population Age 5-9" },
      { id: "5yearincrements.POP10_CY", label: "Population Age 10-14" },
      { id: "5yearincrements.POP15_CY", label: "Population Age 15-19" },
      { id: "5yearincrements.POP20_CY", label: "Population Age 20-24" },
      { id: "5yearincrements.POP25_CY", label: "Population Age 25-29" },
      { id: "5yearincrements.POP30_CY", label: "Population Age 30-34" },
      { id: "5yearincrements.POP35_CY", label: "Population Age 35-39" },
      { id: "5yearincrements.POP40_CY", label: "Population Age 40-44" },
      { id: "5yearincrements.POP45_CY", label: "Population Age 45-49" },
      { id: "5yearincrements.POP50_CY", label: "Population Age 50-54" },
      { id: "5yearincrements.POP55_CY", label: "Population Age 55-59" },
      { id: "5yearincrements.POP60_CY", label: "Population Age 60-64" },
      { id: "5yearincrements.POP65_CY", label: "Population Age 65-69" },
      { id: "5yearincrements.POP70_CY", label: "Population Age 70-74" },
      { id: "5yearincrements.POP75_CY", label: "Population Age 75-79" },
      { id: "5yearincrements.POP80_CY", label: "Population Age 80-84" },
      { id: "5yearincrements.POP85_CY", label: "Population Age 85+" },
      { id: "5yearincrements.MEDAGE_CY", label: "Median Age" },
      { id: "5yearincrements.POP0_FY", label: "Population Age 0-4 (Future Year)" },
      { id: "5yearincrements.POP5_FY", label: "Population Age 5-9 (Future Year)" },
      { id: "5yearincrements.POP10_FY", label: "Population Age 10-14 (Future Year)" },
      { id: "5yearincrements.POP15_FY", label: "Population Age 15-19 (Future Year)" },
      { id: "5yearincrements.POP20_FY", label: "Population Age 20-24 (Future Year)" },
      { id: "5yearincrements.POP25_FY", label: "Population Age 25-29 (Future Year)" },
      { id: "5yearincrements.POP30_FY", label: "Population Age 30-34 (Future Year)" },
      { id: "5yearincrements.POP35_FY", label: "Population Age 35-39 (Future Year)" },
      { id: "5yearincrements.POP40_FY", label: "Population Age 40-44 (Future Year)" },
      { id: "5yearincrements.POP45_FY", label: "Population Age 45-49 (Future Year)" },
      { id: "5yearincrements.POP50_FY", label: "Population Age 50-54 (Future Year)" },
      { id: "5yearincrements.POP55_FY", label: "Population Age 55-59 (Future Year)" },
      { id: "5yearincrements.POP60_FY", label: "Population Age 60-64 (Future Year)" },
      { id: "5yearincrements.POP65_FY", label: "Population Age 65-69 (Future Year)" },
      { id: "5yearincrements.POP70_FY", label: "Population Age 70-74 (Future Year)" },
      { id: "5yearincrements.POP75_FY", label: "Population Age 75-79 (Future Year)" },
      { id: "5yearincrements.POP80_FY", label: "Population Age 80-84 (Future Year)" },
      { id: "5yearincrements.POP85_FY", label: "Population Age 85+ (Future Year)" },
      { id: "5yearincrements.MEDAGE_FY", label: "Median Age (Future Year)" },
      { id: "5yearincrements.POP0C10", label: "Population Age 0-4 (C10)" },
      { id: "5yearincrements.POP5C10", label: "Population Age 5-9 (C10)" },
      { id: "5yearincrements.POP10C10", label: "Population Age 10-14 (C10)" },
      { id: "5yearincrements.POP15C10", label: "Population Age 15-19 (C10)" },
      { id: "5yearincrements.POP20C10", label: "Population Age 20-24 (C10)" },
      { id: "5yearincrements.POP25C10", label: "Population Age 25-29 (C10)" },
      { id: "5yearincrements.POP30C10", label: "Population Age 30-34 (C10)" },
      { id: "5yearincrements.POP35C10", label: "Population Age 35-39 (C10)" },
      { id: "5yearincrements.POP40C10", label: "Population Age 40-44 (C10)" },
      { id: "5yearincrements.POP45C10", label: "Population Age 45-49 (C10)" },
      { id: "5yearincrements.POP50C10", label: "Population Age 50-54 (C10)" },
      { id: "5yearincrements.POP55C10", label: "Population Age 55-59 (C10)" },
      { id: "5yearincrements.POP60C10", label: "Population Age 60-64 (C10)" },
      { id: "5yearincrements.POP65C10", label: "Population Age 65-69 (C10)" },
      { id: "5yearincrements.POP70C10", label: "Population Age 70-74 (C10)" },
      { id: "5yearincrements.POP75C10", label: "Population Age 75-79 (C10)" },
      { id: "5yearincrements.POP80C10", label: "Population Age 80-84 (C10)" },
      { id: "5yearincrements.POP85C10", label: "Population Age 85+ (C10)" },
      { id: "5yearincrements.MEDAGE10", label: "Median Age (C10)" },
    ],
  },
  daytimePopulation: {
    label: "Daytime Population",
    variables: [
      { id: "DaytimePopulation.DPOPWRK_CY", label: "Daytime Workers" },
    ],
  },
  householdIncome: {
    label: "Household Income Distribution",
    variables: [
      { id: "householdincome.HINC0_CY", label: "Household Income < $15,000" },
      { id: "householdincome.HINC15_CY", label: "Household Income $15,000-$24,999" },
      { id: "householdincome.HINC25_CY", label: "Household Income $25,000-$34,999" },
      { id: "householdincome.HINC35_CY", label: "Household Income $35,000-$49,999" },
      { id: "householdincome.HINC50_CY", label: "Household Income $50,000-$74,999" },
      { id: "householdincome.HINC75_CY", label: "Household Income $75,000-$99,999" },
      { id: "householdincome.HINC100_CY", label: "Household Income $100,000-$149,999" },
      { id: "householdincome.HINC150_CY", label: "Household Income $150,000-$199,999" },
      { id: "householdincome.HINC200_CY", label: "Household Income $200,000+" },
      { id: "householdincome.HINC0_FY", label: "Household Income < $15,000 (Future Year)" },
      { id: "householdincome.HINC15_FY", label: "Household Income $15,000-$24,999 (Future Year)" },
      { id: "householdincome.HINC25_FY", label: "Household Income $25,000-$34,999 (Future Year)" },
      { id: "householdincome.HINC35_FY", label: "Household Income $35,000-$49,999 (Future Year)" },
      { id: "householdincome.HINC50_FY", label: "Household Income $50,000-$74,999 (Future Year)" },
      { id: "householdincome.HINC75_FY", label: "Household Income $75,000-$99,999 (Future Year)" },
      { id: "householdincome.HINC100_FY", label: "Household Income $100,000-$149,999 (Future Year)" },
      { id: "householdincome.HINC150_FY", label: "Household Income $150,000-$199,999 (Future Year)" },
      { id: "householdincome.HINC200_FY", label: "Household Income $200,000+ (Future Year)" },
      { id: "householdincome.MEDHINC_FY", label: "Median Household Income (Future Year)" },
      { id: "householdincome.AVGHINC_FY", label: "Average Household Income (Future Year)" },
    ],
  },
  health: {
    label: "Health",
    variables: [
      { id: "Health.MEDHINC_CY", label: "Median Household Income" },
    ],
  },
  householdTotals: {
    label: "Household Totals",
    variables: [
      { id: "householdtotals.FAMHH_FY", label: "Family Households (Future Year)" },
      { id: "householdtotals.AVGHHSZ_FY", label: "Average Household Size (Future Year)" },
    ],
  },
  housingUnitTotals: {
    label: "Housing Unit Totals",
    variables: [
      { id: "housingunittotals.TOTHU_FY", label: "Total Housing Units (Future Year)" },
    ],
  },
  netWorth: {
    label: "Net Worth",
    variables: [
      { id: "networth.NW0_CY", label: "Net Worth < $15,000" },
      { id: "networth.NW15_CY", label: "Net Worth $15,000-$34,999" },
      { id: "networth.NW35_CY", label: "Net Worth $35,000-$49,999" },
      { id: "networth.NW50_CY", label: "Net Worth $50,000-$74,999" },
      { id: "networth.NW75_CY", label: "Net Worth $75,000-$99,999" },
      { id: "networth.NW100_CY", label: "Net Worth $100,000-$149,999" },
      { id: "networth.NW150_CY", label: "Net Worth $150,000-$199,999" },
      { id: "networth.NW250_CY", label: "Net Worth $250,000-$499,999" },
      { id: "networth.NW500_CY", label: "Net Worth $500,000-$999,999" },
      { id: "networth.NW1M_CY", label: "Net Worth $1,000,000-$1,499,999" },
      { id: "networth.NW1PT5M_CY", label: "Net Worth $1,500,000-$1,999,999" },
      { id: "networth.NW2M_CY", label: "Net Worth $2,000,000+" },
      { id: "networth.MEDNW_CY", label: "Median Net Worth" },
      { id: "networth.AVGNW_CY", label: "Average Net Worth" },
    ],
  },
  futureYearDemographics: {
    label: "Future Year Demographics",
    variables: [
      { id: "gender.AGEBASE_FY", label: "Base Age (Future Year)" },
      { id: "householdtotals.FAMHH_FY", label: "Family Households (Future Year)" },
      { id: "housingunittotals.TOTHU_FY", label: "Total Housing Units (Future Year)" },
      { id: "householdtotals.AVGHHSZ_FY", label: "Average Household Size (Future Year)" },
    ],
  },
  historicalPopulation: {
    label: "Historical Population",
    variables: [
      { id: "HistoricalPopulation.TSPOP10_CY", label: "Historical Total Population 2010" },
    ],
  },
  householdsBySize: {
    label: "Households by Size",
    variables: [
      { id: "householdsbysize.FAM2PERS10", label: "Family Households with 2 Persons" },
      { id: "householdsbysize.NF2PERS10", label: "Non-Family Households with 2 Persons" },
      { id: "householdsbysize.NF1PERS10", label: "Non-Family Households with 1 Person" },
    ],
  },
  tapestryHouseholds: {
    label: "Tapestry Households",
    variables: [
      { id: "tapestryhouseholdsNEW.THH01", label: "Tapestry Household THH01" },
      { id: "tapestryhouseholdsNEW.THH02", label: "Tapestry Household THH02" },
      { id: "tapestryhouseholdsNEW.THH03", label: "Tapestry Household THH03" },
      { id: "tapestryhouseholdsNEW.THH04", label: "Tapestry Household THH04" },
      { id: "tapestryhouseholdsNEW.THH05", label: "Tapestry Household THH05" },
      { id: "tapestryhouseholdsNEW.THH06", label: "Tapestry Household THH06" },
      { id: "tapestryhouseholdsNEW.THH07", label: "Tapestry Household THH07" },
      { id: "tapestryhouseholdsNEW.THH08", label: "Tapestry Household THH08" },
      { id: "tapestryhouseholdsNEW.THH09", label: "Tapestry Household THH09" },
      { id: "tapestryhouseholdsNEW.THH10", label: "Tapestry Household THH10" },
      { id: "tapestryhouseholdsNEW.THH11", label: "Tapestry Household THH11" },
      { id: "tapestryhouseholdsNEW.THH12", label: "Tapestry Household THH12" },
      { id: "tapestryhouseholdsNEW.THH13", label: "Tapestry Household THH13" },
      { id: "tapestryhouseholdsNEW.THH14", label: "Tapestry Household THH14" },
      { id: "tapestryhouseholdsNEW.THH15", label: "Tapestry Household THH15" },
      { id: "tapestryhouseholdsNEW.THH16", label: "Tapestry Household THH16" },
      { id: "tapestryhouseholdsNEW.THH17", label: "Tapestry Household THH17" },
      { id: "tapestryhouseholdsNEW.THH18", label: "Tapestry Household THH18" },
      { id: "tapestryhouseholdsNEW.THH19", label: "Tapestry Household THH19" },
      { id: "tapestryhouseholdsNEW.THH20", label: "Tapestry Household THH20" },
      { id: "tapestryhouseholdsNEW.THH21", label: "Tapestry Household THH21" },
      { id: "tapestryhouseholdsNEW.THH22", label: "Tapestry Household THH22" },
      { id: "tapestryhouseholdsNEW.THH23", label: "Tapestry Household THH23" },
      { id: "tapestryhouseholdsNEW.THH24", label: "Tapestry Household THH24" },
      { id: "tapestryhouseholdsNEW.THH25", label: "Tapestry Household THH25" },
      { id: "tapestryhouseholdsNEW.THH26", label: "Tapestry Household THH26" },
      { id: "tapestryhouseholdsNEW.THH27", label: "Tapestry Household THH27" },
      { id: "tapestryhouseholdsNEW.THH28", label: "Tapestry Household THH28" },
      { id: "tapestryhouseholdsNEW.THH29", label: "Tapestry Household THH29" },
      { id: "tapestryhouseholdsNEW.THH30", label: "Tapestry Household THH30" },
      { id: "tapestryhouseholdsNEW.THH31", label: "Tapestry Household THH31" },
      { id: "tapestryhouseholdsNEW.THH32", label: "Tapestry Household THH32" },
      { id: "tapestryhouseholdsNEW.THH33", label: "Tapestry Household THH33" },
      { id: "tapestryhouseholdsNEW.THH34", label: "Tapestry Household THH34" },
      { id: "tapestryhouseholdsNEW.THH35", label: "Tapestry Household THH35" },
      { id: "tapestryhouseholdsNEW.THH36", label: "Tapestry Household THH36" },
      { id: "tapestryhouseholdsNEW.THH37", label: "Tapestry Household THH37" },
      { id: "tapestryhouseholdsNEW.THH38", label: "Tapestry Household THH38" },
      { id: "tapestryhouseholdsNEW.THH39", label: "Tapestry Household THH39" },
      { id: "tapestryhouseholdsNEW.THH40", label: "Tapestry Household THH40" },
      { id: "tapestryhouseholdsNEW.THH41", label: "Tapestry Household THH41" },
      { id: "tapestryhouseholdsNEW.THH42", label: "Tapestry Household THH42" },
      { id: "tapestryhouseholdsNEW.THH43", label: "Tapestry Household THH43" },
      { id: "tapestryhouseholdsNEW.THH44", label: "Tapestry Household THH44" },
      { id: "tapestryhouseholdsNEW.THH45", label: "Tapestry Household THH45" },
      { id: "tapestryhouseholdsNEW.THH46", label: "Tapestry Household THH46" },
      { id: "tapestryhouseholdsNEW.THH47", label: "Tapestry Household THH47" },
      { id: "tapestryhouseholdsNEW.THH48", label: "Tapestry Household THH48" },
      { id: "tapestryhouseholdsNEW.THH49", label: "Tapestry Household THH49" },
      { id: "tapestryhouseholdsNEW.THH50", label: "Tapestry Household THH50" },
      { id: "tapestryhouseholdsNEW.THH51", label: "Tapestry Household THH51" },
      { id: "tapestryhouseholdsNEW.THH52", label: "Tapestry Household THH52" },
      { id: "tapestryhouseholdsNEW.THH53", label: "Tapestry Household THH53" },
      { id: "tapestryhouseholdsNEW.THH54", label: "Tapestry Household THH54" },
      { id: "tapestryhouseholdsNEW.THH55", label: "Tapestry Household THH55" },
      { id: "tapestryhouseholdsNEW.THH56", label: "Tapestry Household THH56" },
      { id: "tapestryhouseholdsNEW.THH57", label: "Tapestry Household THH57" },
      { id: "tapestryhouseholdsNEW.THH58", label: "Tapestry Household THH58" },
      { id: "tapestryhouseholdsNEW.THH59", label: "Tapestry Household THH59" },
      { id: "tapestryhouseholdsNEW.THH60", label: "Tapestry Household THH60" },
      { id: "tapestryhouseholdsNEW.THH61", label: "Tapestry Household THH61" },
      { id: "tapestryhouseholdsNEW.THH62", label: "Tapestry Household THH62" },
      { id: "tapestryhouseholdsNEW.THH63", label: "Tapestry Household THH63" },
      { id: "tapestryhouseholdsNEW.THH64", label: "Tapestry Household THH64" },
      { id: "tapestryhouseholdsNEW.THH65", label: "Tapestry Household THH65" },
      { id: "tapestryhouseholdsNEW.THH66", label: "Tapestry Household THH66" },
      { id: "tapestryhouseholdsNEW.THH67", label: "Tapestry Household THH67" },
    ],
  },
  householdsbysize: {
    label: "Households by Size",
    variables: [
      { id: "householdsbysize.FAM2PERS10", label: "Family Households with 2 Persons" },
      { id: "householdsbysize.NF2PERS10", label: "Non-Family Households with 2 Persons" },
      { id: "householdsbysize.NF1PERS10", label: "Non-Family Households with 1 Person" },
    ],
  },
};
// Helper function to get all variables as a flat array
export const getAllVariables = () => {
  return Object.values(analysisCategories)
    .flatMap((category) => category.variables)
    .map((v) => v.id);
};

// Create a mapping from short attribute keys to labels
const shortKeyToLabelMap = {};
Object.values(analysisCategories).forEach((category) => {
  category.variables.forEach((variable) => {
    const shortKey = variable.id.split(".").pop(); // e.g., "A35I0_CY"
    shortKeyToLabelMap[shortKey] = variable.label;
  });
});

export default class EnrichmentService {
  // Method to split array into chunks
  chunkArray(array, size) {
    const chunks = [];
    for (let i = 0; i < array.length; i += size) {
      chunks.push(array.slice(i, i + size));
    }
    return chunks;
  }

  // Method to prepare geometry for enrichment
  async prepareGeometryForEnrichment(marketAreas) {
    await projection.load();

    return marketAreas.flatMap((area, index) => {
      const rings =
        area.ma_type === "radius"
          ? area.radius_points?.map((point) => point.geometry?.rings || [])
          : area.locations?.flatMap((loc) => loc.geometry?.rings) || [];

      if (!rings.length) {
        console.warn(`No valid geometry for market area: ${area.name}`);
        return [];
      }

      return rings.map((ring, ringIndex) => {
        const polygon = new Polygon({
          rings: ring,
          spatialReference: { wkid: 3857 },
        });

        const projectedPolygon = projection.project(polygon, { wkid: 4326 });
        if (!projectedPolygon) {
          throw new Error(`Projection failed for ${area.name}, ring ${ringIndex}`);
        }

        return {
          geometry: {
            rings: projectedPolygon.rings,
          },
          attributes: { ObjectID: `${index}-${ringIndex}` }, // Unique ID for each area/ring
        };
      });
    });
  }

  // Method to enrich a chunk of study areas
  async enrichChunk(studyAreas, selectedVariables = null) {
    const enrichmentUrl =
      "https://geoenrich.arcgis.com/arcgis/rest/services/World/geoenrichmentserver/Geoenrichment/enrich";

    // Use selected variables or get all variables if none specified
    const analysisVariables = selectedVariables || getAllVariables();

    // Logging for debugging
    console.log("Enriching chunk with variables:", analysisVariables);

    const payload = new URLSearchParams();
    payload.append("f", "json");
    payload.append("returnGeometry", "false");
    payload.append(
      "studyAreas",
      JSON.stringify(
        studyAreas.map((area) => ({
          geometry: area.geometry,
          attributes: area.attributes,
        }))
      )
    );
    payload.append("analysisVariables", JSON.stringify(analysisVariables));
    payload.append("token", ARCGIS_API_KEY); // Add the token parameter

    // Logging the payload for debugging
    console.log("Enrichment payload:", payload.toString());

    const response = await fetch(enrichmentUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        // Removed the Authorization header as token is provided in payload
      },
      body: payload.toString(),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error("Error Response:", errorText);
      throw new Error(
        `Error fetching enrichment data: ${response.statusText} - ${errorText}`
      );
    }

    const data = await response.json();
    return data;
  }

  // Method to enrich all market areas by processing in chunks
  async enrichAreas(marketAreas, selectedVariables = null) {
    const studyAreas = await this.prepareGeometryForEnrichment(marketAreas);
    const chunks = this.chunkArray(studyAreas, CHUNK_SIZE);

    const results = [];
    for (const chunk of chunks) {
      try {
        const response = await this.enrichChunk(chunk, selectedVariables);
        results.push(...(response.results || []));
      } catch (error) {
        console.error("Error enriching chunk:", error);
        // Decide whether to continue or halt; here we halt on error
        throw error;
      }
    }

    return { results };
  }

  // Method to aggregate results for each market area
  aggregateResults(groupedResults, area) {
    const aggregated = {};

    groupedResults.forEach((attributes) => {
      Object.keys(attributes).forEach((key) => {
        if (typeof attributes[key] === "number") {
          aggregated[key] = (aggregated[key] || 0) + attributes[key];
        } else {
          aggregated[key] = attributes[key]; // For non-numeric fields, keep the last value
        }
      });
    });

    return aggregated;
  }

  // Method to get the label for a short attribute key
  getVariableLabel(shortKey) {
    return shortKeyToLabelMap[shortKey] || shortKey; // Return the label or the shortKey if not found
  }

  // Method to export enrichment data to CSV
  exportToCSV(enrichmentData, marketAreas, selectedVariables = null) {
    if (
      !enrichmentData ||
      !enrichmentData.results ||
      enrichmentData.results.length === 0
    ) {
      throw new Error("No data available for export.");
    }

    const rows = [];
    const headers = ["Market Area Name", "Type", "Areas Included", "ID"];

    // Get the variables we want to export
    const variablesToExport = selectedVariables || getAllVariables();

    // Add variable headers with labels
    variablesToExport.forEach((variableId) => {
      const shortKey = variableId.split(".").pop(); // e.g., "A35I0_CY"
      const label = this.getVariableLabel(shortKey);
      headers.push(label);
    });

    // Group results by Market Area
    const groupedResults = {};
    enrichmentData.results.forEach((result) => {
      if (!result.value || !result.value.FeatureSet) return;
      result.value.FeatureSet.forEach((featureSet) => {
        if (!featureSet.features) return;
        featureSet.features.forEach((feature) => {
          const objectId = feature.attributes.ObjectID.split("-")[0];
          if (!groupedResults[objectId]) {
            groupedResults[objectId] = [];
          }
          groupedResults[objectId].push(feature.attributes);
        });
      });
    });

    // Process each Market Area
    marketAreas.forEach((area, areaIndex) => {
      const areaResults = groupedResults[areaIndex] || [];
      const areasIncluded =
        area.locations?.map((loc) => loc.name || "Unknown").join(";") || "N/A";

      const aggregatedData = this.aggregateResults(areaResults, area);

      // Debugging: Log aggregated data for verification
      console.log(`Aggregated Data for Area Index ${areaIndex}:`, aggregatedData);

      // Build the row with only selected variables
      const row = [
        `"${area.name || "N/A"}"`, // Wrap in quotes to handle commas in names
        area.ma_type || "N/A",
        `"${areasIncluded}"`, // Wrap in quotes to handle commas
        areaIndex,
      ];

      // Add data for each selected variable
      variablesToExport.forEach((variableId) => {
        const shortKey = variableId.split(".").pop(); // e.g., "A35I0_CY"
        const value = aggregatedData[shortKey];
        const finalValue =
          value !== undefined && value !== null ? value : "N/A";
        row.push(typeof finalValue === "string" ? `"${finalValue}"` : finalValue);
      });

      rows.push(row.join(","));
    });

    // Include headers at the top
    rows.unshift(headers.join(","));

    return rows.join("\n");
  }

  // Optional: Helper method to get variable categories for UI
  getCategories() {
    return Object.entries(analysisCategories).map(([key, category]) => ({
      id: key,
      label: category.label,
      variableCount: category.variables.length,
    }));
  }

  // Optional: Helper method to get variables by category
  getVariablesByCategory(categoryId) {
    return analysisCategories[categoryId]?.variables || [];
  }

  // Optional: Helper method to validate variable IDs
  validateVariables(variableIds) {
    const allVariables = new Set(getAllVariables());
    return variableIds.filter((id) => allVariables.has(id));
  }
}

export const enrichmentService = new EnrichmentService();
